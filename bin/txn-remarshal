#!/usr/bin/env perl6




use v6;
use File::Path::Resolve;
use File::Presence;
use TXN::Parser;
use TXN::Parser::ParseTree;
use TXN::Remarshal;




# -----------------------------------------------------------------------------
# main
# -----------------------------------------------------------------------------

# input is from JSON stdin
multi sub MAIN(
    Str:D :i(:input($)) where '-',
    Str:D :if(:input-format($)) where /:i json/,
    Str:D :of(:output-format($)) where /:i txn/,
    Str :o(:$output)
    --> Nil
)
{
    my %ledger = remarshal($*IN.lines.join("\n"), :if<json>, :of<hash>);
    my Ledger:D $ledger = remarshal(%ledger, :if<hash>, :of<ledger>);
    my Str:D $txn = remarshal($ledger, :if<ledger>, :of<txn>);
    output($txn, $output);
}

# input is from JSON file
multi sub MAIN(
    Str:D :i(:$input) where .so,
    Str:D :if(:input-format($)) where /:i json/,
    Str:D :of(:output-format($)) where /:i txn/,
    Str :o(:$output)
    --> Nil
)
{
    my Str:D $file = ~File::Path::Resolve.absolute($input);
    File::Presence.exists-readable-file($file)
        or die;
    my %ledger = remarshal(slurp($file), :if<json>, :of<hash>);
    my Ledger:D $ledger = remarshal(%ledger, :if<hash>, :of<ledger>);
    my Str:D $txn = remarshal($ledger, :if<ledger>, :of<txn>);
    output($txn, $output);
}

# input is from TXN stdin
multi sub MAIN(
    Str:D :i(:input($)) where '-',
    Str:D :if(:input-format($)) where /:i txn/,
    Str:D :of(:output-format($)) where /:i json/,
    Str :o(:$output)
    --> Nil
)
{
    my Ledger:D $ledger = from-txn($*IN.lines.join("\n"));
    my %ledger = remarshal($ledger, :if<ledger>, :of<hash>);
    my Str:D $json = remarshal(%ledger, :if<hash>, :of<json>);
    output($json, $output);
}

# input is from TXN file
multi sub MAIN(
    Str:D :i(:$input) where .so,
    Str:D :if(:input-format($)) where /:i txn/,
    Str:D :of(:output-format($)) where /:i json/,
    Str :o(:$output)
    --> Nil
)
{
    my Str:D $file = ~File::Path::Resolve.absolute($input);
    File::Presence.exists-readable-file($file)
        or die;
    my Ledger:D $ledger = from-txn(:$file);
    my %ledger = remarshal($ledger, :if<ledger>, :of<hash>);
    my Str:D $json = remarshal(%ledger, :if<hash>, :of<json>);
    output($json, $output);
}

# input is from JSON stdin
multi sub MAIN(
    Str :i(:input($)),
    Str :o(:$output),
    Str:D :if(:$input-format) where /:i json/,
    Str:D :of(:$output-format) where /:i txn/
    --> Nil
)
{
    my Str:D $txn =
        remarshal($*IN.lines.join("\n"), :$input-format, :$output-format);
    output($txn, $output);
}

# input is from TXN stdin
multi sub MAIN(
    Str :i(:input($)),
    Str :o(:$output),
    Str:D :if(:$input-format) where /:i txn/,
    Str:D :of(:$output-format) where /:i json/
    --> Nil
)
{
    my Str:D $json =
        remarshal($*IN.lines.join("\n"), :$input-format, :$output-format);
    output($json, $output);
}

# output is to stdout
multi sub output(Str:D $remarshal, '-' --> Nil)
{
    say($remarshal.trim);
}

# output is to file
multi sub output(Str:D $remarshal, Str:D $output where .so --> Nil)
{
    spurt($output, $remarshal);
}

# output is to stdout (default)
multi sub output(Str:D $remarshal, Str $? --> Nil)
{
    say($remarshal.trim);
}




# -----------------------------------------------------------------------------
# usage
# -----------------------------------------------------------------------------

sub USAGE(--> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      txn-remarshal [-h] [-i=<file>] [-o=<file>] -if=<format> -of=<format>

    Options:
      -i, --input=<file>
        the input source
      -o, --output=<file>
        the output destination
      -if, --input-format=<format>
        the input file format
      -of, --output-format=<format>
        the output file format

    Formats:
      json
      txn
    EOF
    say($HELP);
}

# vim: set filetype=raku foldmethod=marker foldlevel=0:
